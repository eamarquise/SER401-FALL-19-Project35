/*
 * This function creates JSON schmea for projects
 *   - It takes in values for #projects, # skills
 *   - it randomizes skills, scale 0-4
 *   - it counts up from a given projectID number, 1
 *   - Priority is randomized
 *   - Type is 20% online/ground and 80% hybrid
 */
 
// included files/libraries
#include <iostream>
#include <stdlib.h>
#include <iomanip>
using namespace std;

int main() {
    
    //Variables
    int numProjects = 30;
    int numSkills = 7;
    
    //Start of JSON file
    cout << "{ \n\"projects\":[\n";
    
    //Loops through projectID to print
    for(int projectID = 1; projectID < (numProjects+1); projectID++) {
        
        /*Prints out schema: {"ProjectID": (projectID#),the projectID
         * number is set to have width of 3 if the number (e.g. 1)
         * is less than 3, it will fill with 0's. (e.g. 001)     */
        cout << "{\"ProjectID\": " << setw(3) << setfill('0') << projectID << ",\n";
        
        
        /*Prints out schema: "Priority": (Priority), priority can be 
         * 0,1, or 2. This file randomizes it between the three options.  */
        cout << " \"Priority\": " << rand() % (2 +1) << ",\n";
        
        
        /*Prints out schema: "Skills": [(skills)], generates Skills from 
         * numSkills. Randomizes values between 0-4 for each skill.      */
        cout << " \"Skills\": [";
        for(int i = 0; i < (numSkills); i++){
            if(i < (numSkills-1)) { 
                cout << rand() % (2 +1) << ",";}
            else { 
                cout << rand() % (2 +1)<< "],\n";    }    }
        
        
        /*Prints out schema: "Type": O/G/H, right now 80% is hybrid
         * 10% online and 10% ground projects    */
        cout << " \"Type\": ";
        int percent = (int) numProjects * (0.10);
        if(projectID < (percent+1)) { 
            cout << "\"O\" }, \n\n"; }
        else if ( projectID > percent && projectID < ((percent+percent+1))) { 
            cout << "\"G\" }, \n\n"; }
        else if ( projectID == numProjects) { 
            cout << "\"H\" }\n\n"; }
        else { 
            cout << "\"H\" },\n\n"; }
        
    }
    cout << "]\n}";
    return 0;
}
