/* This function creates JSON schmea for students
 *   - It takes in variables #students, #skills
 *   - it randomizes student skills and availability
 *   - it counts up from a given studentID number, 1
 *   - Divides students equally into 4 class ID's
 *   - Affinity: 33% negative (1/3), 1/4 positive (25%)
 */
 
// included files/libraries
#include <iostream>
#include <stdlib.h>
#include <iomanip>
using namespace std;

int main() {
    
    //Variables
    int numStudent = 24;
    int numSkills = 7;
    int student_25 =(int) (numStudent * 0.25);
    int student_50 =(int) (numStudent * 0.50);
    int student_75 =(int) (numStudent * 0.75);
    
    //Loops through studentIDs to print
    for(int studentID = 1; studentID <= numStudent; studentID++) {
        
        
        /*Prints out schema: {"StudentID": (studentID#), the student ID 
         * number is set to have width of 7 if the number ( e.g. 1) is 
         * less than 7, it will fill with 0's. (e.g. 0000001)   */
        cout << "{\"StudentID\": " << setw(7) << setfill('0') << studentID << ",\n";
        
        
        /*Prints out schema: "ClassID": (classID), classID is divided 
         * equally into 4 sections   */
        if(studentID < student_25) {
            cout << " \"ClassID\": 0,\n";   }
        if(studentID >= student_25 && studentID < student_50) {
            cout << " \"ClassID\": 1,\n";   }
        if(studentID >= student_50 && studentID < student_75) {
            cout << " \"ClassID\": 2,\n";   }
        if(studentID >= student_75 && studentID < numStudent) {
            cout << " \"ClassID\": 3,\n";   }
        
        
        /*Prints out schema: "Skills": [(skills)],  ramdomly generates skills 
         * with values 0-4, total skills given as a parameter         */
        cout << " \"Skills\": [";
        for(int i = 0; i < numSkills; i++){
            if(i < (numSkills-1)) { 
                cout << rand() % (4 +1) << ","; }
            else { 
                cout << rand() % (4 +1) << "],\n";  }
        }
        
        
        /*Prints out schema: "StudentAffinity": null OR [(studentID), T/F]
         * negative affinity: every 1/3 of students gets a randomized negative
         *                  affinity for another Student
         * positive affinity: every 1/4 of students gets a randomized positive
         *                  affinity for another Student
         *
         * It can fall where 1 student has a positive & negative affinity (1/12)
         * Else it will print "null"
         */
        cout << " \"StudentAffinity\": ";
        if ( studentID %3 ==0 || studentID %4 ==0) {
            
            //Negative affinity matches
            int rand_1_25 = rand() % (student_25 + 1);
            while(rand_1_25 ==  studentID) { 
                rand_1_25 = rand() % (student_25 + 1); }
                
            int rand_1_50 = rand() % (student_50-student_25 + 1) + student_25;
            while(rand_1_50 ==  studentID) { 
                rand_1_50 = rand() % (student_50-student_25 + 1) + student_25; }
                
            int rand_1_75 = rand() % (student_75-student_50 + 1) +student_50;
            while(rand_1_75 ==  studentID) { 
                rand_1_75 = rand() % (student_75-student_50 + 1) +student_50; }
            
            int rand_1_100 = rand() % (numStudent-student_75 + 1) + student_75;
            while(rand_1_100 ==  studentID) { 
                rand_1_100 = rand() % (numStudent-student_75 + 1) + student_75; }
            
            //Positive affinity matches
            int rand_2_25 = rand() % (student_25 + 1);
            while(rand_2_25 ==  studentID || rand_2_25 == rand_1_25) { 
                rand_2_25 = rand() % (student_25 + 1); }
                
            int rand_2_50 = rand() % (student_50-student_25 + 1) + student_25;
            while(rand_2_50 ==  studentID || rand_2_50 == rand_1_50) { 
                rand_2_50 = rand() % (student_50-student_25 + 1) + student_25; }
                
            int rand_2_75 = rand() % (student_75-student_50 + 1) +student_50;
            while(rand_2_75 ==  studentID || rand_2_75 == rand_1_75) { 
                rand_2_75 = rand() % (student_75-student_50 + 1) +student_50; }
            
            int rand_2_100 = rand() % (numStudent-student_75 + 1) + student_75;
            while(rand_2_100 ==  studentID || rand_2_100 == rand_1_100) { 
                rand_2_100 = rand() % (numStudent-student_75 + 1) + student_75; }
            
            //printing out affinity
            cout << "[";
            if(studentID %3 == 0) {
                if(studentID < student_25) {
                    cout << setw(7) << setfill('0') << rand_1_25 << ", false";}
                if(studentID >= student_25 && studentID < student_50) {
                    cout << setw(7) << setfill('0') << rand_1_50 << ", false"; }
                if(studentID >= student_50 && studentID < student_75) {
                    cout << setw(7) << setfill('0') << rand_1_75 << ", false"; }
                if(studentID >= student_75 && studentID <= numStudent) {
                    cout << setw(7) << setfill('0') << rand_1_100 << ", false"; }
            }
            if ( studentID %4 == 0) {
                if(studentID %3 != 0) {
                    if(studentID < student_25) {
                        cout << setw(7) << setfill('0') << rand_2_25 << ", true";}
                    if(studentID >= student_25 && studentID < student_50) {
                        cout << setw(7) << setfill('0') << rand_2_50 << ", true"; }
                    if(studentID >= student_50 && studentID < student_75) {
                        cout << setw(7) << setfill('0') << rand_2_75 << ", true"; }
                    if(studentID >= student_75 && studentID <= numStudent) {
                        cout << setw(7) << setfill('0') << rand_2_100 << ", true"; }
                }
                if(studentID %3 == 0) {
                    if(studentID < student_25) {
                        cout << ", " << setw(7) << setfill('0') << rand_2_25 << ", true";}
                    if(studentID >= student_25 && studentID < student_50) {
                        cout << ", " << setw(7) << setfill('0') << rand_2_50 << ", true"; }
                    if(studentID >= student_50 && studentID < student_75) {
                        cout << ", " << setw(7) << setfill('0') << rand_2_75 << ", true"; }
                    if(studentID >= student_75 && studentID <= numStudent) {
                        cout << ", " << setw(7) << setfill('0') << rand_2_100 << ", true"; }
                }
            }
            cout << "],\n";
        }
        else { 
            cout << "null,\n"; }
        
        
        /*Prints out schema: "Availability": [(Availability)] }
         * ramdomly generates 4 times with values 0-5
         */ 
        cout << " \"Availability\": [";
        for(int i = 0; i < 4; i++){
            if(i < 3) { 
                cout << rand() % (5 +1) << ","; }
            else { 
                cout << rand() % (5 +1); }
        }
        if(studentID < numStudent ) {
        	cout << "] },\n\n";    }
        else if( studentID == numStudent) {
          	cout << "] }\n\n";    }      
    }
    return 0;
}
